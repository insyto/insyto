'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

exports.__esModule = true;
exports['default'] = getParamsForRoute;

var _reactRouterLibRoutingUtils = require('react-router/lib/RoutingUtils');

function getParamsForRoute(_ref2) {
  var route = _ref2.route;
  var branch = _ref2.branch;
  var params = _ref2.params;
  var location = _ref2.location;

  var paramsForRoute = {};

  // Extract route params for current route and all ancestors.
  for (var _iterator = branch, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var branchRoute = _ref;

    _Object$assign(paramsForRoute, _reactRouterLibRoutingUtils.getRouteParams(branchRoute, params));
    if (branchRoute === route) {
      break;
    }
  }

  // Extract specified routes from query.
  if (route.queryParams) {
    (function () {
      // Can't use destructuring default value here, because location.query is
      // null when no query string is present.
      var query = location.query || {};

      route.queryParams.forEach(function (queryParam) {
        var queryValue = query[queryParam];
        paramsForRoute[queryParam] = queryValue !== undefined ? queryValue : null;
      });
    })();
  }

  return paramsForRoute;
}

module.exports = exports['default'];